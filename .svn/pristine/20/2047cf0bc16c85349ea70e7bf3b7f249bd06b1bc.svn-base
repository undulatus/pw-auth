package com.pointwest.authentication.service.impl;

import java.io.UnsupportedEncodingException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTCreationException;
import com.pointwest.authentication.domain.Employee;
import com.pointwest.authentication.service.EmployeeService;
import com.pointwest.authentication.service.JWTCreatorService;

@Service
public class JWTCreatorServiceImpl implements JWTCreatorService{
	
	@Autowired
	EmployeeService employeeService;
	
	private static final Logger log = LoggerFactory.getLogger(JWTCreatorServiceImpl.class);
	
	public Date setExpiryDate() {
		LocalDateTime currentTime = LocalDateTime.now(ZoneId.of("UTC"));
		LocalDateTime nextTime = currentTime.plusHours(12);
	    Instant instant = nextTime.toInstant(ZoneOffset.UTC);
	    return Date.from(instant);
	}
	
	public String create(Employee employee) throws UnsupportedEncodingException, JWTCreationException{
		log.debug("MCI >> create");
		String token = "";
		try {
		    Algorithm algorithm = Algorithm.HMAC256("secret");
		    token = JWT.create()
		        .withIssuer("auth0")
		        .withExpiresAt(setExpiryDate())
		        .withClaim("usr", employee.getUsername())
		        .withClaim("rle", employee.getRole())
		        .sign(algorithm);
		    
		} catch (UnsupportedEncodingException uee){
			log.error("An error of type " + uee.getClass() + " occurred while trying to run create(). "
					+ "UTF-8 encoding not supported");
			throw uee;
		} catch (JWTCreationException jwte){
			log.error("An error of type " + jwte.getClass() + " occurred while trying to run create(). "
					+ "Invalid Signing configuration / Couldn't convert Claims.");
			throw jwte;
		}
		log.debug("MCO << create");
		return token;
	}
	
}
